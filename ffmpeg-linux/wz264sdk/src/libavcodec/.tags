!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CLEANFILES	Makefile	/^CLEANFILES = *_tables.c *_tables.h *_tablegen$(HOSTEXESUF)$/;"	m
DESC	Makefile	/^DESC = FFmpeg codec library$/;"	m
GEN_HEADERS	Makefile	/^GEN_HEADERS := $(addprefix $(SUBDIR), $(GEN_HEADERS))$/;"	m
GEN_HEADERS	Makefile	/^GEN_HEADERS = cbrt_tables.h cbrt_fixed_tables.h aacps_tables.h aacps_fixed_tables.h \\$/;"	m
HEADERS	Makefile	/^HEADERS = ac3_parser.h                                                  \\$/;"	m
HOSTPROGS	Makefile	/^HOSTPROGS = aacps_tablegen                                              \\$/;"	m
NAME	Makefile	/^NAME = avcodec$/;"	m
OBJS	Makefile	/^OBJS = ac3_parser.o                                                     \\$/;"	m
OFFSET	libwz264.c	937;"	d	file:
OPT_STR	libwz264.c	433;"	d	file:
PARSE_WZ264_OPT	libwz264.c	484;"	d	file:
TESTOBJS	Makefile	/^TESTOBJS = dctref.o$/;"	m
TESTPROGS	Makefile	/^TESTPROGS = avpacket                                                    \\$/;"	m
TOOLS	Makefile	/^TOOLS = fourcc2pixfmt$/;"	m
TRIG_TABLES	Makefile	/^TRIG_TABLES  = cos cos_fixed sin$/;"	m
TRIG_TABLES	Makefile	/^TRIG_TABLES := $(TRIG_TABLES:%=$(SUBDIR)%_tables.c)$/;"	m
VE	libwz264.c	938;"	d	file:
WZ262_class	libwz264.c	/^static const AVClass WZ262_class = {$/;"	v	file:
WZ264Context	libwz264.c	/^typedef struct WZ264Context {$/;"	s	file:
WZ264Context	libwz264.c	/^} WZ264Context;$/;"	t	typeref:struct:WZ264Context	file:
WZ264_close	libwz264.c	/^static av_cold int WZ264_close(AVCodecContext *avctx)$/;"	f	file:
WZ264_frame	libwz264.c	/^static int WZ264_frame(AVCodecContext *ctx, AVPacket *pkt, const AVFrame *frame,$/;"	f	file:
WZ264_init	libwz264.c	/^static av_cold int WZ264_init(AVCodecContext *avctx)$/;"	f	file:
WZ264_log	libwz264.c	/^static void WZ264_log(void *p, int level, const char *fmt, va_list args)$/;"	f	file:
a53_cc	libwz264.c	/^    int a53_cc;$/;"	m	struct:WZ264Context	file:
aq_mode	libwz264.c	/^    int aq_mode;$/;"	m	struct:WZ264Context	file:
aq_smooth	libwz264.c	/^    float aq_smooth;$/;"	m	struct:WZ264Context	file:
aq_strength	libwz264.c	/^    float aq_strength;$/;"	m	struct:WZ264Context	file:
aud	libwz264.c	/^    int aud;$/;"	m	struct:WZ264Context	file:
av_codec_init_next	allcodecs.c	/^static void av_codec_init_next(void)$/;"	f	file:
av_codec_init_static	allcodecs.c	/^static void av_codec_init_static(void)$/;"	f	file:
av_codec_iterate	allcodecs.c	/^const AVCodec *av_codec_iterate(void **opaque)$/;"	f
av_codec_next	allcodecs.c	/^AVCodec *av_codec_next(const AVCodec *c)$/;"	f
av_codec_next_init	allcodecs.c	/^static AVOnce av_codec_next_init = AV_ONCE_INIT;$/;"	v	file:
av_codec_static_init	allcodecs.c	/^static AVOnce av_codec_static_init = AV_ONCE_INIT;$/;"	v	file:
avcintra_class	libwz264.c	/^    int avcintra_class;$/;"	m	struct:WZ264Context	file:
avcodec_find_decoder	allcodecs.c	/^AVCodec *avcodec_find_decoder(enum AVCodecID id)$/;"	f
avcodec_find_decoder_by_name	allcodecs.c	/^AVCodec *avcodec_find_decoder_by_name(const char *name)$/;"	f
avcodec_find_encoder	allcodecs.c	/^AVCodec *avcodec_find_encoder(enum AVCodecID id)$/;"	f
avcodec_find_encoder_by_name	allcodecs.c	/^AVCodec *avcodec_find_encoder_by_name(const char *name)$/;"	f
avcodec_register	allcodecs.c	/^av_cold void avcodec_register(AVCodec *codec)$/;"	f
avcodec_register_all	allcodecs.c	/^void avcodec_register_all(void)$/;"	f
avfmt2_num_planes	libwz264.c	/^static int avfmt2_num_planes(int avfmt)$/;"	f	file:
b_bias	libwz264.c	/^    int b_bias;$/;"	m	struct:WZ264Context	file:
b_frame_strategy	libwz264.c	/^    int b_frame_strategy;$/;"	m	struct:WZ264Context	file:
b_pyramid	libwz264.c	/^    int b_pyramid;$/;"	m	struct:WZ264Context	file:
bluray_compat	libwz264.c	/^    int bluray_compat;$/;"	m	struct:WZ264Context	file:
brest	libwz264.c	/^    wzbrest_t brest;  \/\/ bitrate estimator$/;"	m	struct:WZ264Context	file:
chroma_offset	libwz264.c	/^    int chroma_offset;$/;"	m	struct:WZ264Context	file:
class	libwz264.c	/^    AVClass        *class;$/;"	m	struct:WZ264Context	file:
codec_list	allcodecs.c	/^AVCodec * codec_list[] = {$/;"	v
coder	libwz264.c	/^    int coder;$/;"	m	struct:WZ264Context	file:
convert_pix_fmt	libwz264.c	/^static int convert_pix_fmt(enum AVPixelFormat pix_fmt)$/;"	f	file:
cplxblur	libwz264.c	/^    float cplxblur;$/;"	m	struct:WZ264Context	file:
cqp	libwz264.c	/^    int cqp;$/;"	m	struct:WZ264Context	file:
crf	libwz264.c	/^    float crf;$/;"	m	struct:WZ264Context	file:
crf_max	libwz264.c	/^    float crf_max;$/;"	m	struct:WZ264Context	file:
dct8x8	libwz264.c	/^    int dct8x8;$/;"	m	struct:WZ264Context	file:
deblock	libwz264.c	/^    char *deblock;$/;"	m	struct:WZ264Context	file:
direct_pred	libwz264.c	/^    int direct_pred;$/;"	m	struct:WZ264Context	file:
enc	libwz264.c	/^    wz264_t         *enc;$/;"	m	struct:WZ264Context	file:
encode_nals	libwz264.c	/^static int encode_nals(AVCodecContext *ctx, AVPacket *pkt,$/;"	f	file:
fast_pskip	libwz264.c	/^    int fast_pskip;$/;"	m	struct:WZ264Context	file:
fastfirstpass	libwz264.c	/^    int fastfirstpass;$/;"	m	struct:WZ264Context	file:
ff_libwz262_encoder	libwz264.c	/^AVCodec ff_libwz262_encoder = {$/;"	v
ff_libwz264_encoder	libwz264.c	/^AVCodec ff_libwz264_encoder = {$/;"	v
ff_libwz264rgb_encoder	libwz264.c	/^AVCodec ff_libwz264rgb_encoder = {$/;"	v
filter_frame_cache	libwz264.c	/^    AVThreadMessageQueue* filter_frame_cache;$/;"	m	struct:WZ264Context	file:
find_codec	allcodecs.c	/^static AVCodec *find_codec(enum AVCodecID id, int (*x)(const AVCodec *))$/;"	f	file:
find_codec_by_name	allcodecs.c	/^static AVCodec *find_codec_by_name(const char *name, int (*x)(const AVCodec *))$/;"	f	file:
forced_idr	libwz264.c	/^    int forced_idr;$/;"	m	struct:WZ264Context	file:
has_flushed	libwz264.c	/^    int has_flushed;$/;"	m	struct:WZ264Context	file:
has_output	libwz264.c	/^    int has_output;$/;"	m	struct:WZ264Context	file:
intra_refresh	libwz264.c	/^    int intra_refresh;$/;"	m	struct:WZ264Context	file:
level	libwz264.c	/^    char *level;$/;"	m	struct:WZ264Context	file:
mbtree	libwz264.c	/^    int mbtree;$/;"	m	struct:WZ264Context	file:
mixed_refs	libwz264.c	/^    int mixed_refs;$/;"	m	struct:WZ264Context	file:
motion_est	libwz264.c	/^    int motion_est;$/;"	m	struct:WZ264Context	file:
nal_hrd	libwz264.c	/^    int nal_hrd;$/;"	m	struct:WZ264Context	file:
noise_reduction	libwz264.c	/^    int noise_reduction;$/;"	m	struct:WZ264Context	file:
options	libwz264.c	/^static const AVOption options[] = {$/;"	v	file:
params	libwz264.c	/^    wz264_param_t    params;$/;"	m	struct:WZ264Context	file:
partitions	libwz264.c	/^    char *partitions;$/;"	m	struct:WZ264Context	file:
pic	libwz264.c	/^    wz264_picture_t  pic;$/;"	m	struct:WZ264Context	file:
pix_fmts_10bit	libwz264.c	/^static const enum AVPixelFormat pix_fmts_10bit[] = {$/;"	v	typeref:enum:AVPixelFormat	file:
pix_fmts_8bit	libwz264.c	/^static const enum AVPixelFormat pix_fmts_8bit[] = {$/;"	v	typeref:enum:AVPixelFormat	file:
pix_fmts_8bit_rgb	libwz264.c	/^static const enum AVPixelFormat pix_fmts_8bit_rgb[] = {$/;"	v	typeref:enum:AVPixelFormat	file:
pix_fmts_9bit	libwz264.c	/^static const enum AVPixelFormat pix_fmts_9bit[] = {$/;"	v	typeref:enum:AVPixelFormat	file:
pix_fmts_all	libwz264.c	/^static const enum AVPixelFormat pix_fmts_all[] = {$/;"	v	typeref:enum:AVPixelFormat	file:
preset	libwz264.c	/^    char *preset;$/;"	m	struct:WZ264Context	file:
profile	libwz264.c	/^    char *profile;$/;"	m	struct:WZ264Context	file:
psy	libwz264.c	/^    int psy;$/;"	m	struct:WZ264Context	file:
psy_rd	libwz264.c	/^    char *psy_rd;$/;"	m	struct:WZ264Context	file:
rc_lookahead	libwz264.c	/^    int rc_lookahead;$/;"	m	struct:WZ264Context	file:
reconfig_encoder	libwz264.c	/^static void reconfig_encoder(AVCodecContext *ctx, const AVFrame *frame)$/;"	f	file:
remap_deprecated_codec_id	allcodecs.c	/^static enum AVCodecID remap_deprecated_codec_id(enum AVCodecID id)$/;"	f	file:
rgbclass	libwz264.c	/^static const AVClass rgbclass = {$/;"	v	file:
scenechange_threshold	libwz264.c	/^    int scenechange_threshold;$/;"	m	struct:WZ264Context	file:
sei	libwz264.c	/^    uint8_t        *sei;$/;"	m	struct:WZ264Context	file:
sei_size	libwz264.c	/^    int             sei_size;$/;"	m	struct:WZ264Context	file:
slice_max_size	libwz264.c	/^    int slice_max_size;$/;"	m	struct:WZ264Context	file:
ssim	libwz264.c	/^    int ssim;$/;"	m	struct:WZ264Context	file:
stats	libwz264.c	/^    char *stats;$/;"	m	struct:WZ264Context	file:
tune	libwz264.c	/^    char *tune;$/;"	m	struct:WZ264Context	file:
weightb	libwz264.c	/^    int weightb;$/;"	m	struct:WZ264Context	file:
weightp	libwz264.c	/^    int weightp;$/;"	m	struct:WZ264Context	file:
wpredp	libwz264.c	/^    char *wpredp;$/;"	m	struct:WZ264Context	file:
wz264_class	libwz264.c	/^static const AVClass wz264_class = {$/;"	v	file:
wz264_csp_eight	libwz264.c	/^static const enum AVPixelFormat wz264_csp_eight[] = { AV_PIX_FMT_YUV420P, AV_PIX_FMT_YUVJ420P,$/;"	v	typeref:enum:AVPixelFormat	file:
wz264_defaults	libwz264.c	/^static const AVCodecDefault wz264_defaults[] = {$/;"	v	file:
wz264_init_static	libwz264.c	/^static av_cold void wz264_init_static(AVCodec *codec)$/;"	f	file:
wz264_params	libwz264.c	/^    char *wz264_params;$/;"	m	struct:WZ264Context	file:
wz264opts	libwz264.c	/^    char *wz264opts;$/;"	m	struct:WZ264Context	file:
